geom_line(aes(y = y_pred2), size = 2, col ='red') +
geom_point(aes(y = minutes_played))
fieldgoal_linmod9 <- lm(minutes_played ~ poly(field_goal_percentage,9), data = nba_subset)
summary(fieldgoal_linmod2)
y_pred <- predict(object = fieldgoal_linmod9, data = nba_subset)
reg_df9 <- cbind(nba_subset, y_pred)
ggplot(data = reg_df9, aes(x = field_goal_percentage)) +
geom_line(aes(y = y_pred), size = 2) +
geom_point(aes(y = minutes_played))
n_players <- nrow(nba_subset) # get total number of data points
train <- base::sample(n_players, n_players/2,  # randomly choose n/2 indices
replace = FALSE)
test <- (1:n_players)[-train] # Choose the other indicies
nba_train <- nba_subset[train,] # Select out training data
nba_test <- nba_subset[test,] # Select out testing data
candidate_model_1 <- lm(minutes_played ~ poly(field_goal_percentage,2) + position_aggregate + position_aggregate*poly(field_goal_percentage,2), data = nba_train)
candidate_model_2 <- lm(minutes_played ~ poly(field_goal_percentage,2), data = nba_train)
candidate_model_2 <- lm(minutes_played ~ poly(field_goal_percentage,30), data = nba_train)
candidate_model_2 <- lm(minutes_played ~ poly(field_goal_percentage,20), data = nba_train)
candidate_model_2 <- lm(minutes_played ~ poly(field_goal_percentage,2), data = nba_train)
candidate_model_3 <- lm(minutes_played ~ poly(field_goal_percentage,20), data = nba_train)
model_1_preds <- predict(candidate_model_1, newdata = nba_test)
model_1_rmse <- sqrt(mean((model_1_preds - nba_test$minutes_played)^2))
model_2_preds <- predict(candidate_model_2, newdata = nba_test)
model_2_rmse <- sqrt(mean((model_2_preds - nba_test$minutes_played)^2))
model_3_preds <- predict(candidate_model_3, newdata = nba_test)
model_3_rmse <- sqrt(mean((model_3_preds - nba_test$minutes_played)^2))
c(model_1_rmse, model_2_rmse, model_3_rmse)
model_1_preds <- predict(candidate_model_1, newdata = nba_train)
model_1_rmse <- sqrt(mean((model_1_preds - nba_train$minutes_played)^2))
model_2_preds <- predict(candidate_model_2, newdata = nba_train)
model_2_rmse <- sqrt(mean((model_2_preds - nba_train$minutes_played)^2))
model_3_preds <- predict(candidate_model_3, newdata = nba_train)
model_3_rmse <- sqrt(mean((model_3_preds - nba_train$minutes_played)^2))
c(model_1_rmse, model_2_rmse, model_3_rmse)
lg_fgpct <- log(field_goal_percentage)
lg_fgpct <- log(nba_subset$field_goal_percentage)
nba_subset$lg_fgpct <- log(nba_subset$field_goal_percentage)
lm.1 <- lm(minutes_played ~ lg_fgpct, data = nba_subset)
summary(lm.1)
pred <- predict(lm.1, newdata = nba_train)
rmse <- sqrt(mean((lm.1 - nba_train$minutes_played)^2))
pred <- predict(lm.1, newdata = nba_train)
rmse <- sqrt(mean((pred - nba_train$minutes_played)^2))
nba_subset$lg_fgpct <- log(nba_subset$field_goal_percentage)
lm.1 <- lm(minutes_played ~ lg_fgpct, data = nba_subset)
lm.1 <- lm(minutes_played ~ lg_fgpct, data = nba_train)
pred <- predict(lm.1, newdata = nba_test)
rmse <- sqrt(mean((pred - nba_test$minutes_played)^2))
lm.1 <- lm(minutes_played ~ lg_fgpct, data = nba_train)
nba_subset$lg_fgpct <- log(nba_subset$field_goal_percentage)
lm.1 <- lm(minutes_played ~ lg_fgpct, data = nba_train)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(jsonlite)
fromJSON("/events/7298.json")
fromJSON("events/7298.json")
df[1]
df[,1]
df <- as.data.frame(fromJSON("events/7298.json"))
df[,1]
df[1]
df[1,]
df[1,"type"]
df$type <- as.vector(df$type)
df
df$type
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
load("EventDF.Rdata")
EventDf
head(EventDF)
unique(EventDF$type.name)
head(EventDF, 25)
c(EventDF$type.id, possession_team.id) <- NULL
)
unique(EventDF$type.name)
EventDF
colnames(EventDF)
grep("goal"colnames(EventDF))
grep("goal", colnames(EventDF))
grep("goal", colnames(EventDF), value = TRUE)
grep("xg", colnames(EventDF), value = TRUE)
colnames(EventDF)
head(EventDF)
head(EventDF, 25)
df <- firstMatch %>%
select(index, minute, second, possession, duration, location, under_pressure,
type.name, )
library(tidyverse)
df <- firstMatch %>% filter(possession == 1)
df
grep("freeze", colnames(EventDF), value = TRUE)
colnames(EventDF)
head(EventDF, 25)
df <- df %>% select(nimute, second, possession, location, type.name, shot.freeze_frame, shot.statsbomb_xg)
df <- df %>% select(minute, second, possession, location, type.name, shot.freeze_frame, shot.statsbomb_xg)
df
df <- firstMatch %>%
filter(possession == 1) %>%
select(minute, second, possession, location, type.name, shot.freeze_frame, shot.statsbomb_xg)
df <- firstMatch %>%
filter(possession == 2) %>%
select(minute, second, possession, location, type.name, shot.freeze_frame, shot.statsbomb_xg)
df
df <- firstMatch %>%
filter(possession == 2 | possession == 3) %>%
select(minute, second, possession, location, type.name, shot.freeze_frame, shot.statsbomb_xg)
df
df <- firstMatch %>%
filter(possession == 4) %>%
select(minute, second, possession, location, type.name, shot.freeze_frame, shot.statsbomb_xg)
df
unique(firstMatch$possession)
firstMatch %>%
filter(possession == 4) %>%
select(minute, second, possession, location, type.name, shot.freeze_frame, shot.statsbomb_xg)
firstMatch
firstMatch %>% filter(type.name == "Pass" | type.name == "Shot")
firstMatch %>% filter(type.name == "Pass" | type.name == "Shot") %>%
select(minute, second, possession, type.name, location, pass.end_location, pass.end_location, shot.statsbomb_xg)
summary(firstMatch$shot.statsbomb_xg)
View(head(passes, n = 40L))
View(head(EventDF))
View(head(firstMatch, n = 16L))
cbind(firstMatch$id, firstMatch$related_events)
EventDF.2 <- within(EventDF, rm('player.id','position.id','pass.recipient.id','pass.height.id','pass.body_part.id','pass.type.id','pass.outcome.id','ball_receipt.outcome.id','dribble.outcome.id','shot.body_part.id',
'shot.type.id','shot.outcome.id','goalkeeper.technique.id','goalkeeper.position.id',
'goalkeeper.body_part.id','goalkeeper.outcome.id','goalkeeper.type.id',
'interception.outcome.id','foul_committed.card.id','foul_committed.type.id',
'duel.type.id','duel.outcome.id','50_50.outcome.id','substitution.outcome.id',
'substitution.replacement.id','bad_behaviour.card.id'))
#split into sequences of shots
library(tidyverse)
EventDF.2 %>% group_by(., possession) %>% slice()
#split into sequences
sequences <- split(firstMatch, firstMatch$possession)
#Version 2.
firstMatch %>% filter(type.name == "Pass" | type.name == "Shot") %>% select(possession,type.name,possession_team.name, location, pass.end_location, duration,shot.statsbomb_xg, minute, second) -> passes
passes %>% group_by(possession) %>% mutate(length = n()) -> passes
View(head(passes, n = 40L))
View(head(passes, n = 40L))
head(passes)
passes %>% unnest(location)
head(passes)
head(passes)
passes %>% unnest(location)
passes %>% separate(location)
passes %>% separate(location, into = c("start.x, start.y"))
passes %>% spread(location)
View(head(EventDF))
View(head(firstMatch, n = 16L))
cbind(firstMatch$id, firstMatch$related_events)
EventDF.2 <- within(EventDF, rm('player.id','position.id','pass.recipient.id','pass.height.id','pass.body_part.id','pass.type.id','pass.outcome.id','ball_receipt.outcome.id','dribble.outcome.id','shot.body_part.id',
'shot.type.id','shot.outcome.id','goalkeeper.technique.id','goalkeeper.position.id',
'goalkeeper.body_part.id','goalkeeper.outcome.id','goalkeeper.type.id',
'interception.outcome.id','foul_committed.card.id','foul_committed.type.id',
'duel.type.id','duel.outcome.id','50_50.outcome.id','substitution.outcome.id',
'substitution.replacement.id','bad_behaviour.card.id'))
library(tidyverse)
EventDF.2 %>% group_by(., possession) %>% slice()
firstMatch <- EventDF.2[1:2720,]
View(head(firstMatch,n = 40L))
#Version 2.
firstMatch %>% filter(type.name == "Pass" | type.name == "Shot") %>% select(possession,type.name, minute,second, duration, possession_team.name, location, pass.end_location,shot.end_location, shot.statsbomb_xg) -> passes
passes %>% group_by(possession) %>% mutate(length = n()) -> passes
View(head(passes, n = 40L))
#initating x and y location, x_end and y_end location
passes$x_location = 1:978
passes$y_location = 1:978
passes$x_endlocation = 1:978
passes$y_endlocation = 1:978
#replacing x and y location correctly with  for loop
for(ii in 1:nrow(passes)) {
passes$x_location[ii] = passes$location[[ii]][1]
passes$y_location[ii] = passes$location[[ii]][2]
}
passes$x_endlocation = 1:978
passes$y_endlocation = 1:978
#replacing x and y end locations correctly with for loop
for(jj in 1:nrow(passes)) {
if(!is.null(passes$pass.end_location[[jj]])) {
passes$x_endlocation[[jj]] = passes$pass.end_location[[jj]][1]
passes$y_endlocation[[jj]] = passes$pass.end_location[[jj]][2]
} else { #makes sure vector is filled whole way through without affecting position on field
passes$x_endlocation[[jj]] = -99
passes$y_endlocation[[jj]] = -99
}
}
warnings()
View(head(passes, n = 80L))
#adding 0.0 xG to all passes not a shot
passes$shot.statsbomb_xg<- ifelse(is.na(passes$shot.statsbomb_xg), 0, passes$shot.statsbomb_xg)
passes %>% group_by(possession) %>% mutate()
View(head(passes, n = 80L))
?seq
View(head(EventDF))
View((head(EventDF))[[22]][[2]])
unique(EventDF$tactics.formation)
install.packages("rjson")
library(tidyverse)
library(rjson)
library(data.table)
library(magrittr)
data_path <- 'open-data-master/data/events'
files <- dir(path = data_path,pattern = "*.json")
allEvents_df<- files %>% map(function(x) jsonlite::fromJSON(txt = file.path(data_path, x) , flatten = TRUE))
data <- tibble(match = files) %>% # create a data frame
# holding the file names
mutate(data = map(files,function(x) jsonlite::fromJSON(txt = file.path(data_path, x) , flatten = TRUE) ) # a new data column
)
data<-data %>% unnest()
length(allEvents_df)
(allEvents_df)
View(head(data))
EventDF<- allEvents_df  %>% bind_rows()
View(EventDF)
data
library(jsonlite)
data_path <- 'open-data-master/data/events'
files <- dir(path = data_path,pattern = "*.json")
allEvents_df<- files %>% map(function(x) jsonlite::fromJSON(txt = file.path(data_path, x) , flatten = TRUE))
data <- tibble(match = files) %>% # create a data frame
# holding the file names
mutate(data = map(files,function(x) jsonlite::fromJSON(txt = file.path(data_path, x) , flatten = TRUE) ) # a new data column
)
data<-data %>% unnest()
length(allEvents_df)
(allEvents_df)
View(head(data))
data
EventDF<- allEvents_df  %>% bind_rows()
View(EventDF)
getwd()
setwd("~/Documents/GitHub/Soccer")
getwd()
data_path <- '/data/events'
files <- dir(path = data_path,pattern = "*.json")
allEvents_df<- files %>% map(function(x) jsonlite::fromJSON(txt = file.path(data_path, x) , flatten = TRUE))
data <- tibble(match = files) %>% # create a data frame
# holding the file names
mutate(data = map(files,function(x) jsonlite::fromJSON(txt = file.path(data_path, x) , flatten = TRUE) ) # a new data column
)
data<-data %>% unnest()
length(allEvents_df)
(allEvents_df)
View(head(data))
data
EventDF<- allEvents_df  %>% bind_rows()
View(EventDF)
data_path <- '/data/events/'
files <- dir(path = data_path,pattern = "*.json")
data_path <- './data/events/'
files <- dir(path = data_path, pattern = "*.json")
allEvents_df<- files %>% map(function(x) jsonlite::fromJSON(txt = file.path(data_path, x) , flatten = TRUE))
data <- tibble(match = files) %>% # create a data frame
# holding the file names
mutate(data = map(files,function(x) jsonlite::fromJSON(txt = file.path(data_path, x) , flatten = TRUE) ) # a new data column
)
data<-data %>% unnest()
length(allEvents_df)
(allEvents_df)
View(head(data))
data
EventDF<- allEvents_df  %>% bind_rows()
View(EventDF)
EventDF <- within(data, rm('player.id','position.id','pass.recipient.id','pass.height.id','pass.body_part.id','pass.type.id','pass.outcome.id','ball_receipt.outcome.id','dribble.outcome.id','shot.body_part.id',
'shot.type.id','shot.outcome.id','goalkeeper.technique.id','goalkeeper.position.id',
'goalkeeper.body_part.id','goalkeeper.outcome.id','goalkeeper.type.id',
'interception.outcome.id','foul_committed.card.id','foul_committed.type.id',
'duel.type.id','duel.outcome.id','50_50.outcome.id','substitution.outcome.id',
'substitution.replacement.id','bad_behaviour.card.id'))
passes_and_shots<-EventDF %>% filter(type.name == "Pass" | type.name == "Shot") %>% select(match,possession,type.name,possession_team.name, location, pass.end_location, duration,shot.statsbomb_xg, minute, second)
passesShots<-passes_and_shots %>% group_by(possession,match) %>% mutate(length = rev(seq(1:n())))
View(head(passesShots))
data %>% filter(type.name == "Pass") %>% select(pass.switch, pass.cross, pass.type.name) %>% head(30)
data %>% filter(type.name == "Pass") %>% select(pass.switch, pass.cross, pass.type.name) %>% View(head(30))
data %>% filter(type.name == "Pass") %>% select(pass.switch, pass.cross, pass.type.name) %>% View(head(., 30))
data %>% filter(type.name == "Pass") %>% select(pass.switch, pass.cross, pass.type.name) %>% head(30) %>% view
data %>% filter(type.name == "Pass") %>% select(type.name, pass.switch, pass.cross, pass.type.name) %>% head(30) %>% view
data %>% filter(type.name == "Pass") %>% select(type.name, pass.switch, pass.cross, pass.type.name) %>% head(100) %>% view
data %>% filter(type.name == "Pass") %>%
select(pass.switch == TRUE & pass.cross == TRUE) %>%
select(type.name, pass.switch, pass.cross, pass.type.name) %>% head(100) %>% view
data %>% filter(type.name == "Pass") %>%
filter(pass.switch == TRUE & pass.cross == TRUE) %>%
select(type.name, pass.switch, pass.cross, pass.type.name) %>% head(100) %>% view
passes_and_shots<-EventDF %>% filter(type.name == "Pass" | type.name == "Shot") %>%
select(match, possession, type.name, possession_team.name, location, pass.angle, pass.length, duration,
shot.statsbomb_xg, minute, second, position.name, pass.height.name, pass.body_part.name,
pass.switch, pass.cross, pass.type.name)
passesShots<-passes_and_shots %>% group_by(possession,match) %>% mutate(length = rev(seq(1:n())))
View(head(passesShots))
passes_and_shots$pass.switch[which(is.na(passes_and_shots$pass.switch))] <- FALSE
passes_and_shots$pass.cross[which(is.na(passes_and_shots$pass.cross))] <- FALSE
passesShots<-passes_and_shots %>% group_by(possession,match) %>% mutate(length = rev(seq(1:n())))
View(head(passesShots))
passes_and_shots$pass.switch
current.match <- passesShots$match[ii]
current.pos <- passesShots$possession[ii]
current.fill <- ifelse(is.na(passesShots$shot.statsbomb_xg), 0, passesShots$shot.statsbomb_xg[ii])
for (ii in nrow(passesShots):1) {
if (passesShots$match[ii] != current.match || passesShots$possession[ii] != current.pos) {
current.fill <- ifelse(is.na(passesShots$shot.statsbomb_xg), 0, passesShots$shot.statsbomb_xg[ii])
}
passesShots$shot.statsbomb_xg[ii] <- current.fill
}
current.match <- passesShots$match[ii]
current.pos <- passesShots$possession[ii]
current.fill <- ifelse(is.na(passesShots$shot.statsbomb_xg), 0, passesShots$shot.statsbomb_xg[ii])
for (ii in nrow(passesShots):1) {
if (passesShots$match[ii] != current.match || passesShots$possession[ii] != current.pos) {
current.match <- passesShots$match[ii]
current.pos <- passesShots$possession[ii]
current.fill <- ifelse(is.na(passesShots$shot.statsbomb_xg), 0, passesShots$shot.statsbomb_xg[ii])
}
passesShots$shot.statsbomb_xg[ii] <- current.fill
}
levels(passesShots$match)
passesShots$match
unique(passesShots$match)
f <- function(df) {
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[ii])
for (ii in nrow(df):1) {
if (df$match[ii] != current.match || df$possession[ii] != current.pos) {
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[ii])
}
df$shot.statsbomb_xg[ii] <- current.fill
}
return(df)
}
f(passesShots %>% select(match == "19714.json" | match == "19715.json"))
passesShots %>% select(match == "19714.json" | match == "19715.json")
typeof(passesShots$match)
f(passesShots[which(passesShots$match == "19714.json" || passesShots$match == "19715.json")])
passesShots[which(passesShots$match == "19714.json" || passesShots$match == "19715.json")]
passesShots[,which(passesShots$match == "19714.json" || passesShots$match == "19715.json")]
passesShots[which(passesShots$match == "19714.json" || passesShots$match == "19715.json"),]
head(passesShots)
passesShots %>% select(match == "19714.json" | match == "19715.json")
View(passesShots)
f(passesShots %>% slice(1, 10000))
which(is.na(passesShots$possession))
which(is.na(passesShots$match))
f(passesShots %>% slice(1, 1000))
f <- function(df) {
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[ii])
cat(current.match, current.pos, current.fill)
for (ii in nrow(df):1) {
if (df$match[ii] != current.match || df$possession[ii] != current.pos) {
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[ii])
}
df$shot.statsbomb_xg[ii] <- current.fill
}
return(df)
}
f(passesShots %>% slice(1, 1000))
f <- function(df) {
current.match <- df$match[nrow(df)]
current.pos <- df$possession[nrow(df)]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[nrow(df)])
cat(current.match, current.pos, current.fill)
for (ii in nrow(df):1) {
if (df$match[ii] != current.match || df$possession[ii] != current.pos) {
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[ii])
}
df$shot.statsbomb_xg[ii] <- current.fill
}
return(df)
}
f(passesShots %>% slice(1, 1000))
df$match[nrow(df)]
df <- passesShots %>% slice(1, 1000)
df$match[nrow(df)]
current.match <- df$match[nrow(df)]
current.pos <- df$possession[nrow(df)]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[nrow(df)])
cat(current.match, current.pos, current.fill)
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[nrow(df)])
cat(current.match, current.pos, current.fill)
current.pos <- df$possession[nrow(df)]
cat(current.match, current.pos)
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[nrow(df)])
cat(current.fill)
current.fill <- ifelse(is.na(df$shot.statsbomb_xg[nrow(df)]), 0, df$shot.statsbomb_xg[nrow(df)])
cat(current.fill)
f <- function(df) {
current.match <- df$match[nrow(df)]
current.pos <- df$possession[nrow(df)]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg[nrow(df)]), 0, df$shot.statsbomb_xg[nrow(df)])
cat(current.match, current.pos, current.fill)
for (ii in nrow(df):1) {
if (df$match[ii] != current.match || df$possession[ii] != current.pos) {
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[ii])
}
df$shot.statsbomb_xg[ii] <- current.fill
}
return(df)
}
df <- passesShots %>% slice(1, 1000)
View(df)
S
df <- passesShots %>% slice(1, 1000)
View(df)
passesShots<-passes_and_shots %>% group_by(possession,match) %>% mutate(length = rev(seq(1:n())))
View(head(passesShots, 40))
passesShots<-passes_and_shots %>% group_by(possession,match) %>% mutate(length = rev(seq(1:n())))
f <- function(df) {
current.match <- df$match[nrow(df)]
current.pos <- df$possession[nrow(df)]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg[nrow(df)]), 0, df$shot.statsbomb_xg[nrow(df)])
cat(current.match, current.pos, current.fill)
for (ii in nrow(df):1) {
if (df$match[ii] != current.match || df$possession[ii] != current.pos) {
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[ii])
}
df$shot.statsbomb_xg[ii] <- current.fill
}
return(df)
}
df <- passesShots %>% slice(1, 1000)
View(df)
df <- passesShots %>% slice(1, 1000)
View(df)
df <- head(passesShots, 10000)
View(df)
df.adjusted <- f(df)
View(df.adjusted)
View(df)
View(df.adjusted)
df <- head(passesShots, 100)
cat("Break at: ", ii, "\n")
df.adjusted <- f(df)
f <- function(df) {
current.match <- df$match[nrow(df)]
current.pos <- df$possession[nrow(df)]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg[nrow(df)]), 0, df$shot.statsbomb_xg[nrow(df)])
for (ii in nrow(df):1) {
if (df$match[ii] != current.match || df$possession[ii] != current.pos) {
cat("Break at: ", ii, "\n")
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg), 0, df$shot.statsbomb_xg[ii])
}
df$shot.statsbomb_xg[ii] <- current.fill
}
return(df)
}
df <- head(passesShots, 100)
df.adjusted <- f(df)
warnings()
f <- function(df) {
current.match <- df$match[nrow(df)]
current.pos <- df$possession[nrow(df)]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg[nrow(df)]), 0, df$shot.statsbomb_xg[nrow(df)])
for (ii in nrow(df):1) {
if (df$match[ii] != current.match || df$possession[ii] != current.pos) {
cat("Break at: ", ii, "\n")
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg[ii]), 0, df$shot.statsbomb_xg[ii])
}
df$shot.statsbomb_xg[ii] <- current.fill
}
return(df)
}
df <- head(passesShots, 100)
df.adjusted <- f(df)
View(df.adjusted)
View(df.adjusted)
source('~/Documents/GitHub/Soccer/SoccerProject2.R', echo=TRUE)
df.adjusted
View(df.adjusted)
df.cleaned <- f(passesShots)
df.cleaned <- f(passesShots)
f <- function(df) {
current.match <- df$match[nrow(df)]
current.pos <- df$possession[nrow(df)]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg[nrow(df)]), 0, df$shot.statsbomb_xg[nrow(df)])
for (ii in nrow(df):1) {
if (df$match[ii] != current.match || df$possession[ii] != current.pos) {
current.match <- df$match[ii]
current.pos <- df$possession[ii]
current.fill <- ifelse(is.na(df$shot.statsbomb_xg[ii]), 0, df$shot.statsbomb_xg[ii])
}
df$shot.statsbomb_xg[ii] <- current.fill
}
return(df)
}
df.cleaned <- f(passesShots)
write.csv(df.cleaned, file = "cleaned_data.csv")
head(df.cleaned)
View(head(df.cleaned))
for (jj in 1:nrow(df.cleaned)) {
df.cleaned$x.location[jj] <- df.cleaned$location[[jj]][1]
df.cleaned$y.location[jj] <- df.cleaned$location[[jj]][2]
}
View(head(df.cleaned))
View(tail(df.cleaned))
write.csv(df.cleaned %>% select(-location), file = "cleaned_data.csv")
